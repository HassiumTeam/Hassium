use File from IO;
use FS from IO;
use Encoding from Text;
use StringBuilder from Text;

func main (args) {
	JacHash hash = new JacHash ();

	if (args.length <= 0) {
		displayHelp ();
	}

	if (args [1] == "-h" || args [1] == "--help")
		displayhelp ();
	else if (args [1] == "-f" || args [1] == "--file")
		println (hash.computehashfromstream (FS.open (args [2])));
	else if (args [1] == "-s" || args [1] == "--string")
		println (hash.computehashfrombytes (new Encoding ("ASCII").getbytes (args[2])));
}

func displayhelp () {
	println ("Usage: JacHash.has [FLAG] [DATA]");
        println ("-h --help              Displays this help and exits.");
        println ("-f --file [PATH]       Calculates the hash of the file at [PATH].");
	println ("-s --string [STRING]   Calculates the hash of the [STRING].");
	OS.exit (0);
}

# Class used to generate hashes from bytes.
class JacHash {
	# Blank constructor
	func new () {
		this.MAX_LENGTH = 16;
		this.FILLER_BYTE = 0xF;
	}

	# Computes a hash string from the given list of bytes.
	func computehashfrombytes (bytes : list) : string {
		this.init ();
		bytes = this.pad (bytes);
		foreach (i in range (0, bytes.length))
			this.x += bytes [i].toint ();

		for (int i = 0; i < bytes.length; i++)
			bytes [i % MAX_LENGTH] = this.next (bytes [i].tochar ());
		
		return this.gethexstring (bytes);
	}

        # Computes a hash string from the given stream reader.
        func computehashfromstream (file : File) : string {
                this.init ();
                int length = file.length;
                int appendtostream = 0;
                if (length < MAX_LENGTH)
                        appendtostream = MAX_LENGTH;
                while (file.position < file.length)
                        this.x += file.readbyte ();
                file.position = 0;
                foreach (i in range (0, appendtostream))
                        this.x += FILLER_BYTE;
                list result = [].fill (MAX_LENGTH, 0);
                while (file.position < file.length)
                        result [file.position % MAX_LENGTH] = next (file.readbyte ());
                return this.gethexstring (result);
        }

	# Generates a pseudo-random number from the specified byte.
	func next (bl : char) : int {
		this.a = this.shiftleft(bl, this.x);
		this.b = (this.b ^ bl) - this.x;
		this.c = (this.a + this.b) & this.x;
		this.d ^= this.x - this.b;
		this.x ^= this.d;
		return (this.a * this.c + this.b - this.x * this.d ^ bl) & 0xFF;
	}

	# Shifts the specified byte left by the specified number of bits and returns the result.
	func shiftleft (b : char, bits : int) : int {
		return b << bits | b >> 32 - bits;
	}

	# Pads the given list of bytes so that it is at least MAX_LENGTH long.
	func pad (bytes : list) : list {
		for (i = bytes.length; i < MAX_LENGTH; i++) {
			bytes.add (FILLER_BYTE);
		}
		return bytes;
	}

	# Sets the initial constant values for a, b, c, d, and x.
	func init () {
		this.a = 0x6B87 & 0xFF;
		this.b = 0x7F43 & 0xFF;
		this.c = 0xA4Ad & 0xFF;
		this.d = 0xDC3F & 0xFF;
		this.x = 0;
	}

	# Returns a hex string representation of the specified list of bytes.
	func gethexstring (bytes : list) : string {
		sb = new StringBuilder ();
		foreach (b in bytes)
			sb.appendf ("{0:x2}", b);
		return sb.tostring ();
	}
}
