use * from Text;

func main () {
	lexer = new Lexer();
	tokens = lexer.scan (input ());
	foreach (token in tokens)
		printf ("{0} {1}\n", token.tokentype, token.value);
}

class Lexer {
	func new () {}

	func scan (source) {
		this.code = source;
		this.position = 0;
		result = [];
		while (this.peekchar () != (-1)) {
			this.whitespace ();
			if (this.peekchar ().isletterordigit ())
				result.add (this.scandata ());
			else if (this.peekchar () == '"')
				result.add (this.scanstring ());
			else if (this.peekchar () == ';')
				result.add (new Token(TokenType.Semicolon, this.readchar ().tostring ()));
			else
				printf ("Unknown token {0}", this.readchar ().tostring ());
		}

		return result;
	}

	func scanstring () {
		this.position += 1;
		str = "";
		while (peekchar () != '"')
			str = str + this.readchar ().tostring ();
		this.position = this.position + 1;
		return new Token(TokenType.String, str);
	}

	func scandata () {
		ret = new StringBuilder ();
		while (this.peekchar ().tochar ().isletterordigit () && this.peekchar () != (-1)) {
			ret.append (this.readchar ().tostring ());
		}
		return new Token(TokenType.Identifier, ret.tostring ());
	}

	func whitespace () {
		while (this.peekchar ().iswhitespace () && this.peekchar () != (-1))
			this.readchar ();
	}

	func peekchar () {
		if (this.position < this.code.length)
			return this.code [this.position];
		return (-1);
	}
	func readchar () {
		if (this.position < this.code.length) {
			ret = this.code [this.position];
			this.position = this.position + 1;
			return ret;
		}
		return (-1);
	}
}

class Token {
	func new (tokenType, value) {
		this.tokentype = tokenType;
		this.value = value;
	}
}

enum TokenType {
	Identifier,
	Semicolon,
	String
}
