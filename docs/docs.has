use Crypto;
use Drawing;
use IO;
use Math;
use Net;
use Text;
use Types;
use Util;

from IO use FS;
from IO use Path;

from FuncDoc use FuncDoc;

func main () {
	docmodule (Crypto, "Crypto");
	docmodule (Drawing, "Drawing");
	docmodule (IO, "IO");
	docmodule (Math, "Math");
	docmodule (Net, "Net");
	docmodule (Text, "Text");
	docmodule (Types, "Types");
	docmodule (Util, "Util");
}

func docmodule (mod : object, name : string) {
	if (!FS.direxists (name)) {
		FS.createdir (name);
	}

	FS.cwd = Path.combine (FS.cwd, name); 

	classes = getattribs (mod);

	foreach (clazz in classes) {
		docclazz (clazz [1], clazz [0]);
	}

	FS.cwd = Path.combine (FS.cwd, "../");
}

func docclazz (clazz, name : string) {
	file = FS.open ("{0}.md".format (name));

	file.writeline ("## class {0}\n".format (name));

	attribs = getattribs (clazz);

	foreach (attrib in attribs) {
		funcdoc = new FuncDoc (attrib [1]);
		foreach (rep in funcdoc.sourcereps) {
			file.writeline ("#### ```{0}```\n".format (rep));
		}

		file.writeline ("&nbsp;&nbsp;&nbsp;&nbsp;```@desc:``` {0}\n".format (funcdoc.desc));
		foreach (param in funcdoc.reqparams) {
			file.writeline ("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;```@param {0}:``` {1}\n".format (param [0], param [1]));
		}
		foreach (param in funcdoc.optparams) {
			file.writeline ("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;```@optional {0}:``` {1}\n".format (param [0], param [1]));
		}
		file.writeline ("&nbsp;&nbsp;&nbsp;&nbsp;```@returns:``` {0}\n".format (funcdoc.returns));
	}

	file.close ();
}
